/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.0.alpha-1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "SessionManagementSubscriptionDataRetrievalApi.h"
#include "Helpers.h"

namespace oai {
namespace udm {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace oai::udm::model;

SessionManagementSubscriptionDataRetrievalApi::SessionManagementSubscriptionDataRetrievalApi(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
}

void SessionManagementSubscriptionDataRetrievalApi::init() {
    setupRoutes();
}

void SessionManagementSubscriptionDataRetrievalApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/:supi/sm-data", Routes::bind(&SessionManagementSubscriptionDataRetrievalApi::get_sm_data_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&SessionManagementSubscriptionDataRetrievalApi::session_management_subscription_data_retrieval_api_default_handler, this));
}

void SessionManagementSubscriptionDataRetrievalApi::get_sm_data_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto supi = request.param(":supi").as<std::string>();
    
    // Getting the query params
    /*
     * TODO:
    auto supportedFeaturesQuery = request.query().get("supported-features");
    Pistache::Optional<std::string> supportedFeatures;
    if(!supportedFeaturesQuery.isEmpty()){
        std::string value;
        if(fromStringValue(supportedFeaturesQuery.get(), value)){
            supportedFeatures = Pistache::Some(value);
        }
    }
    */
    auto singleNssaiQuery = request.query().get("single-nssai");
    Pistache::Optional<Snssai> singleNssai;
/*    if(!singleNssaiQuery.isEmpty()){
        Snssai value;
        if(fromStringValue(singleNssaiQuery.get(), value)){
            singleNssai = Pistache::Some(value);
        }
    }
*/
    auto dnnQuery = request.query().get("dnn");
    Pistache::Optional<std::string> dnn;
    if(!dnnQuery.isEmpty()){
        std::string value;
        if(fromStringValue(dnnQuery.get(), value)){
            dnn = Pistache::Some(value);
        }
    }
    /*
     * TODO:

    auto plmnIdQuery = request.query().get("plmn-id");
    Pistache::Optional<PlmnId> plmnId;
    if(!plmnIdQuery.isEmpty()){
        PlmnId value;
        if(fromStringValue(plmnIdQuery.get(), value)){
            plmnId = Pistache::Some(value);
        }
    }

    */
    /*
     * TODO:

    // Getting the header params
    auto ifNoneMatch = request.headers().tryGetRaw("If-None-Match");
    auto ifModifiedSince = request.headers().tryGetRaw("If-Modified-Since");
   */
    try {
      //this->get_sm_data(supi, supportedFeatures, singleNssai, dnn, plmnId, ifNoneMatch, ifModifiedSince, response);
    	this->get_sm_data(supi, singleNssai, dnn, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}

void SessionManagementSubscriptionDataRetrievalApi::session_management_subscription_data_retrieval_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}

