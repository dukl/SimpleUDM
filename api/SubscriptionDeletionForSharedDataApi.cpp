/**
* Nudm_SDM
* Nudm Subscriber Data Management Service. ï¿½ 2019, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 
*
* The version of the OpenAPI document: 2.1.0.alpha-1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "SubscriptionDeletionForSharedDataApi.h"
#include "Helpers.h"

namespace oai {
namespace udm {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace oai::udm::model;

SubscriptionDeletionForSharedDataApi::SubscriptionDeletionForSharedDataApi(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
}

void SubscriptionDeletionForSharedDataApi::init() {
    setupRoutes();
}

void SubscriptionDeletionForSharedDataApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Delete(*router, base + "/shared-data-subscriptions/:subscriptionId", Routes::bind(&SubscriptionDeletionForSharedDataApi::unsubscribe_for_shared_data_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&SubscriptionDeletionForSharedDataApi::subscription_deletion_for_shared_data_api_default_handler, this));
}

void SubscriptionDeletionForSharedDataApi::unsubscribe_for_shared_data_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto subscriptionId = request.param(":subscriptionId").as<std::string>();
    
    try {
      this->unsubscribe_for_shared_data(subscriptionId, response);
    } catch (nlohmann::detail::exception &e) {
        //send a 400 error
        response.send(Pistache::Http::Code::Bad_Request, e.what());
        return;
    } catch (std::exception &e) {
        //send a 500 error
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
        return;
    }

}

void SubscriptionDeletionForSharedDataApi::subscription_deletion_for_shared_data_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}

